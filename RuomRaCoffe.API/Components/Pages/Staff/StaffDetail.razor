@page "/staff/{Id:guid}"
@using RuomRaCoffe.Admin.Services
@using RuomRaCoffe.API.Data.Entities
@using RuomRaCoffe.Shared.Dtos
@inject StaffService StaffService
@inject NavigationManager Navigation

<PageTitle>Staff Detail</PageTitle>

<div class="md-container">
    <!-- Header -->
    <div class="md-row md-mb-4">
        <div class="md-col-12">
            <div class="md-d-flex md-justify-content-between md-align-items-center">
                <h1 class="md-d-flex md-align-items-center">
                    <span class="material-icons md-font-size-2xl md-mb-0" style="margin-right: 0.5rem;">person</span>
                    Staff Detail
                </h1>
                <div class="md-d-flex">
                    <button class="md-btn md-btn-outlined md-mb-0" style="margin-right: 0.5rem;" @onclick='() => Navigation.NavigateTo("/staff")'>
                        <span class="material-icons" style="margin-right: 0.25rem;">arrow_back</span>
                        Back to Staff
                    </button>
                    <button class="md-btn md-btn-primary md-mb-0" @onclick="EditStaff">
                        <span class="material-icons" style="margin-right: 0.25rem;">edit</span>
                        Edit Staff
                    </button>
                </div>
            </div>
        </div>
    </div>

    @if (isLoading)
    {
        <div class="md-loading">
            <div class="md-spinner"></div>
        </div>
    }
    else if (staff != null)
    {
        <div class="md-row">
            <!-- Staff Information -->
            <div class="md-col-4">
                <div class="md-card">
                    <div class="md-card-body md-text-center">
                        <div class="md-avatar md-avatar-lg md-mb-0" style="margin: 0 auto 1rem auto; display: block;">
                            @staff.Name.Substring(0, 1).ToUpper()
                        </div>
                        <h4>@staff.Name</h4>
                        <p style="color: var(--md-gray-600);">@staff.Role</p>
                        <div class="md-mb-3">
                            @if (staff.IsCurrentlyWorking)
                            {
                                <span class="md-badge md-badge-success">Currently Working</span>
                            }
                            else if (staff.IsActive)
                            {
                                <span class="md-badge md-badge-warning">Available</span>
                            }
                            else
                            {
                                <span class="md-badge md-badge-error">Inactive</span>
                            }
                        </div>
                        <div class="md-divider"></div>
                        <div class="md-text-left">
                            <div class="md-mb-2">
                                <small style="color: var(--md-gray-600);">Email</small>
                                <div>@staff.Email</div>
                            </div>
                            <div class="md-mb-2">
                                <small style="color: var(--md-gray-600);">Phone</small>
                                <div>@staff.Phone</div>
                            </div>
                            <div class="md-mb-2">
                                <small style="color: var(--md-gray-600);">Member Since</small>
                                <div>@staff.CreatedAt.ToString("MMM dd, yyyy")</div>
                            </div>
                            @if (staff.LastCheckIn.HasValue)
                            {
                                <div class="md-mb-2">
                                    <small style="color: var(--md-gray-600);">Last Check In</small>
                                    <div>@staff.LastCheckIn.Value.ToString("MMM dd, yyyy HH:mm")</div>
                                </div>
                            }
                            @if (staff.LastCheckOut.HasValue)
                            {
                                <div class="md-mb-2">
                                    <small style="color: var(--md-gray-600);">Last Check Out</small>
                                    <div>@staff.LastCheckOut.Value.ToString("MMM dd, yyyy HH:mm")</div>
                                </div>
                            }
                        </div>
                    </div>
                </div>
            </div>

            <!-- Recent Activity -->
            <div class="md-col-8">
                <div class="md-card">
                    <div class="md-card-header">
                        <h5 class="md-mb-0 md-d-flex md-align-items-center">
                            <span class="material-icons md-mb-0" style="margin-right: 0.5rem;">history</span>
                            Recent Shift History
                        </h5>
                    </div>
                    <div class="md-card-body">
                        @if (shiftHistory != null && shiftHistory.Any())
                        {
                            <div style="overflow-x: auto;">
                                <table class="md-table">
                                    <thead>
                                        <tr>
                                            <th>Date</th>
                                            <th>Check In</th>
                                            <th>Check Out</th>
                                            <th>Duration</th>
                                            <th>Note</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @foreach (var shift in shiftHistory)
                                        {
                                            <tr>
                                                <td>@shift.CheckInTime.ToString("MMM dd, yyyy")</td>
                                                <td>@shift.CheckInTime.ToString("HH:mm")</td>
                                                <td>
                                                    @if (shift.CheckOutTime.HasValue)
                                                    {
                                                        @shift.CheckOutTime.Value.ToString("HH:mm")
                                                    }
                                                    else
                                                    {
                                                        <span style="color: var(--md-gray-500);">-</span>
                                                    }
                                                </td>
                                                <td>
                                                    @if (shift.WorkDuration.HasValue)
                                                    {
                                                        @shift.WorkDuration.Value.ToString(@"hh\:mm")
                                                    }
                                                    else
                                                    {
                                                        <span style="color: var(--md-gray-500);">-</span>
                                                    }
                                                </td>
                                                <td>
                                                    @if (!string.IsNullOrEmpty(shift.Note))
                                                    {
                                                        <small>@shift.Note</small>
                                                    }
                                                    else
                                                    {
                                                        <small style="color: var(--md-gray-500);">No note</small>
                                                    }
                                                </td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            </div>
                        }
                        else
                        {
                            <div class="md-text-center" style="padding: 2rem;">
                                <span class="material-icons md-font-size-4xl" style="color: var(--md-gray-400);">schedule</span>
                                <p style="color: var(--md-gray-600); margin-top: 1rem;">No shift history available</p>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>

        <!-- Statistics -->
        <div class="md-row md-mt-4">
            <div class="md-col-3">
                <div class="md-card" style="background: linear-gradient(135deg, var(--md-primary), var(--md-primary-dark)); color: white;">
                    <div class="md-card-body">
                        <div class="md-d-flex md-justify-content-between md-align-items-center">
                            <div>
                                <h6 class="md-mb-0">Total Shifts</h6>
                                <h3 class="md-mb-0">@(shiftHistory?.Count ?? 0)</h3>
                            </div>
                            <div class="md-align-self-center">
                                <span class="material-icons md-font-size-3xl">calendar_today</span>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="md-col-3">
                <div class="md-card" style="background: linear-gradient(135deg, var(--md-success), var(--md-success-dark)); color: white;">
                    <div class="md-card-body">
                        <div class="md-d-flex md-justify-content-between md-align-items-center">
                            <div>
                                <h6 class="md-mb-0">Total Hours</h6>
                                <h3 class="md-mb-0">@totalHours.ToString("F1")</h3>
                            </div>
                            <div class="md-align-self-center">
                                <span class="material-icons md-font-size-3xl">schedule</span>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="md-col-3">
                <div class="md-card" style="background: linear-gradient(135deg, var(--md-info), var(--md-info-dark)); color: white;">
                    <div class="md-card-body">
                        <div class="md-d-flex md-justify-content-between md-align-items-center">
                            <div>
                                <h6 class="md-mb-0">Avg. Shift</h6>
                                <h3 class="md-mb-0">@averageShiftHours.ToString("F1")h</h3>
                            </div>
                            <div class="md-align-self-center">
                                <span class="material-icons md-font-size-3xl">trending_up</span>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="md-col-3">
                <div class="md-card" style="background: linear-gradient(135deg, var(--md-warning), var(--md-warning-dark)); color: white;">
                    <div class="md-card-body">
                        <div class="md-d-flex md-justify-content-between md-align-items-center">
                            <div>
                                <h6 class="md-mb-0">This Month</h6>
                                <h3 class="md-mb-0">@thisMonthShifts</h3>
                            </div>
                            <div class="md-align-self-center">
                                <span class="material-icons md-font-size-3xl">calendar_month</span>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }
    else
    {
        <div class="md-text-center" style="padding: 3rem;">
            <span class="material-icons md-font-size-4xl" style="color: var(--md-gray-400);">person_off</span>
            <h3 class="md-mt-3">Staff Not Found</h3>
            <p style="color: var(--md-gray-600);">The staff member you're looking for doesn't exist.</p>
            <button class="md-btn md-btn-primary" @onclick='() => Navigation.NavigateTo("/staff")'>
                Back to Staff List
            </button>
        </div>
    }
</div>

@code {
    [Parameter]
    public Guid Id { get; set; }

    private StaffDto? staff;
    private List<ShiftRecordDto>? shiftHistory;
    private bool isLoading = true;
    private double totalHours = 0;
    private double averageShiftHours = 0;
    private int thisMonthShifts = 0;

    protected override async Task OnInitializedAsync()
    {
        await LoadStaffDetail();
    }

    private async Task LoadStaffDetail()
    {
        try
        {
            isLoading = true;
            
            // TODO: Replace with actual API calls
            staff = new StaffDto
            {
                Id = Id,
                Name = "John Doe",
                Email = "john@example.com",
                Phone = "0123456789",
                Role = "Manager",
                IsActive = true,
                IsCurrentlyWorking = true,
                LastCheckIn = DateTime.Now.AddHours(-2),
                LastCheckOut = null,
                CreatedAt = DateTime.Now.AddDays(-30)
            };

            shiftHistory = new List<ShiftRecordDto>
            {
                new ShiftRecordDto
                {
                    Id = Guid.NewGuid(),
                    UserId = Id,
                    UserName = staff.Name,
                    CheckInTime = DateTime.Now.AddDays(-1).AddHours(8),
                    CheckOutTime = DateTime.Now.AddDays(-1).AddHours(16),
                    Note = "Regular shift",
                    WorkDuration = TimeSpan.FromHours(8),
                    CreatedAt = DateTime.Now.AddDays(-1)
                },
                new ShiftRecordDto
                {
                    Id = Guid.NewGuid(),
                    UserId = Id,
                    UserName = staff.Name,
                    CheckInTime = DateTime.Now.AddDays(-2).AddHours(9),
                    CheckOutTime = DateTime.Now.AddDays(-2).AddHours(17),
                    Note = "Late start",
                    WorkDuration = TimeSpan.FromHours(8),
                    CreatedAt = DateTime.Now.AddDays(-2)
                }
            };

            CalculateStatistics();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading staff detail: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }

    private void CalculateStatistics()
    {
        if (shiftHistory == null) return;

        var completedShifts = shiftHistory.Where(s => s.WorkDuration.HasValue).ToList();
        
        totalHours = completedShifts.Sum(s => s.WorkDuration!.Value.TotalHours);
        averageShiftHours = completedShifts.Any() ? totalHours / completedShifts.Count : 0;
        
        var thisMonth = DateTime.Now.Month;
        thisMonthShifts = shiftHistory.Count(s => s.CheckInTime.Month == thisMonth);
    }

    private void EditStaff()
    {
        Navigation.NavigateTo($"/staff/{Id}/edit");
    }
} 