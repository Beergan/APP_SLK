@page "/staff/create"
@using RuomRaCoffe.API.Services
@using RuomRaCoffe.API.Data.Entities
@using RuomRaCoffe.Shared.Dtos
@using FluentValidation
@inject StaffService StaffService
@inject NavigationManager Navigation
@inject ISnackbar Snackbar
@inject IDialogService DialogService

<PageTitle>Create Staff - Admin</PageTitle>

<MudContainer MaxWidth="MaxWidth.Medium" Class="pa-4">
    <MudCard>
        <MudCardHeader>
            <MudText Typo="Typo.h5" Class="d-flex align-center">
                <MudIcon Icon="@Icons.Material.Filled.PersonAdd" Class="mr-3" />
                Create New Staff
            </MudText>
        </MudCardHeader>

        <MudForm Model="@staffModel" @ref="@form" Validation="@(staffValidator.ValidateValue)" ValidationDelay="0">
            <MudCardContent>
                <MudGrid>
                    <MudItem xs="12" sm="6">
                        <MudTextField @bind-Value="staffModel.Name"
                                      For="@(() => staffModel.Name)"
                                      Immediate="true"
                                      Label="Full Name"
                                      Required="true"
                                      Adornment="Adornment.Start"
                                      AdornmentIcon="@Icons.Material.Filled.Person" />
                    </MudItem>

                    <MudItem xs="12" sm="6">
                        <MudTextField @bind-Value="staffModel.Email"
                                      For="@(() => staffModel.Email)"
                                      Immediate="true"
                                      Label="Email"
                                      Required="true"
                                      Adornment="Adornment.Start"
                                      AdornmentIcon="@Icons.Material.Filled.Email" />
                    </MudItem>

                    <MudItem xs="12" sm="6">
                        <MudTextField @bind-Value="staffModel.Phone"
                                      For="@(() => staffModel.Phone)"
                                      Immediate="true"
                                      Label="Phone Number"
                                      Required="true"
                                      Adornment="Adornment.Start"
                                      AdornmentIcon="@Icons.Material.Filled.Phone" />
                    </MudItem>

                    <MudItem xs="12" sm="6">
                        <MudSelect @bind-Value="staffModel.Role"
                                   For="@(() => staffModel.Role)"
                                   Label="Role"
                                   Required="true"
                                   Adornment="Adornment.Start"
                                   AdornmentIcon="@Icons.Material.Filled.Work">
                            <MudSelectItem Value="@("Staff")">Staff</MudSelectItem>
                            <MudSelectItem Value="@("Manager")">Manager</MudSelectItem>
                            <MudSelectItem Value="@("Admin")">Admin</MudSelectItem>
                        </MudSelect>
                    </MudItem>

                    <MudItem xs="12">
                        <MudTextField @bind-Value="staffModel.Address"
                                      For="@(() => staffModel.Address)"
                                      Immediate="true"
                                      Label="Address"
                                      Lines="3"
                                      Adornment="Adornment.Start"
                                      AdornmentIcon="@Icons.Material.Filled.LocationOn" />
                    </MudItem>

                    <MudItem xs="12" sm="6">
                        <MudTextField @bind-Value="staffModel.Password"
                                      For="@(() => staffModel.Password)"
                                      Immediate="true"
                                      Label="Password"
                                      Required="true"
                                      InputType="InputType.Password"
                                      Adornment="Adornment.Start"
                                      AdornmentIcon="@Icons.Material.Filled.Lock" />
                    </MudItem>

                    <MudItem xs="12" sm="6">
                        <MudTextField @bind-Value="staffModel.ConfirmPassword"
                                      For="@(() => staffModel.ConfirmPassword)"
                                      Immediate="true"
                                      Label="Confirm Password"
                                      Required="true"
                                      InputType="InputType.Password"
                                      Adornment="Adornment.Start"
                                      AdornmentIcon="@Icons.Material.Filled.Lock" />
                    </MudItem>
                </MudGrid>
            </MudCardContent>

            <MudCardActions>
                <MudButton Variant="Variant.Outlined"
                           Color="Color.Secondary"
                           OnClick="@(() => Navigation.NavigateTo("/staff"))"
                           StartIcon="@Icons.Material.Filled.ArrowBack">
                    Cancel
                </MudButton>
                <MudSpacer />
                <MudButton Variant="Variant.Filled"
                           Color="Color.Primary"
                           OnClick="@(async () => await CreateStaff())"
                           Disabled="@isLoading"
                           StartIcon="@Icons.Material.Filled.Save">
                    @if (isLoading)
                    {
                        <MudProgressCircular Size="Size.Small" Indeterminate="true" Class="mr-2" />
                        <span>Creating...</span>
                    }
                    else
                    {
                        <span>Create Staff</span>
                    }
                </MudButton>
            </MudCardActions>
        </MudForm>
    </MudCard>
</MudContainer>

@code {
    private MudForm form;
    private bool isLoading = false;
    private StaffModel staffModel = new();
    private StaffModelFluentValidator staffValidator = new();

    public class StaffModel
    {
        public string Name { get; set; } = string.Empty;
        public string Email { get; set; } = string.Empty;
        public string Phone { get; set; } = string.Empty;
        public string Role { get; set; } = "Staff";
        public string Address { get; set; } = string.Empty;
        public string Password { get; set; } = string.Empty;
        public string ConfirmPassword { get; set; } = string.Empty;
    }

    public class StaffModelFluentValidator : AbstractValidator<StaffModel>
    {
        public StaffModelFluentValidator()
        {
            RuleFor(x => x.Name)
                .NotEmpty().WithMessage("Name is required")
                .Length(2, 100).WithMessage("Name must be between 2 and 100 characters");

            RuleFor(x => x.Email)
                .NotEmpty().WithMessage("Email is required")
                .EmailAddress().WithMessage("Invalid email format");

            RuleFor(x => x.Phone)
                .NotEmpty().WithMessage("Phone is required")
                .Matches(@"^[0-9+\-\s\(\)]+$").WithMessage("Invalid phone number format");

            RuleFor(x => x.Role)
                .NotEmpty().WithMessage("Role is required")
                .Must(role => new[] { "Staff", "Manager", "Admin" }.Contains(role))
                .WithMessage("Invalid role selected");

            RuleFor(x => x.Password)
                .NotEmpty().WithMessage("Password is required")
                .MinimumLength(6).WithMessage("Password must be at least 6 characters")
                .Matches(@"^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)").WithMessage("Password must contain at least one uppercase letter, one lowercase letter, and one number");

            RuleFor(x => x.ConfirmPassword)
                .Equal(x => x.Password).WithMessage("Passwords do not match");

            RuleFor(x => x.Address)
                .MaximumLength(200).WithMessage("Address cannot exceed 200 characters");
        }

        public Func<object, string, Task<IEnumerable<string>>> ValidateValue => async (model, propertyName) =>
        {
            var result = await ValidateAsync(ValidationContext<StaffModel>.CreateWithOptions((StaffModel)model, x => x.IncludeProperties(propertyName)));
            if (result.IsValid)
                return Array.Empty<string>();
            return result.Errors.Select(e => e.ErrorMessage);
        };
    }

    private async Task CreateStaff()
    {
        try
        {
            // Validate form
            await form.Validate();

            if (!form.IsValid)
            {
                Snackbar.Add("Please fix validation errors", Severity.Warning);
                return;
            }

            isLoading = true;

            // Tạo CreateStaffDto từ StaffModel
            var createStaffDto = new CreateStaffDto
            {
                Name = staffModel.Name,
                Email = staffModel.Email,
                Phone = staffModel.Phone,
                Role = staffModel.Role,
                Address = staffModel.Address,
                Password = staffModel.Password
            };

            // Gọi API để tạo nhân sự
            var createdStaff = await StaffService.CreateStaffAsync(createStaffDto);

            if (createdStaff != null)
            {
                Snackbar.Add($"Staff '{createdStaff.Name}' created successfully!", Severity.Success);

                // Hiển thị dialog xác nhận
                var dialog = await DialogService.ShowMessageBox(
                    "Success",
                    $"Staff '{createdStaff.Name}' created successfully!",
                    yesText: "Create Another",
                    noText: "Go to Staff List",
                    cancelText: "Stay Here"
                );

                if (dialog == true)
                {
                    // Reset form để tạo nhân sự mới
                    staffModel = new StaffModel();
                    await form.Reset();
                }
                else if (dialog == false)
                {
                    // Chuyển đến trang danh sách nhân sự
                    Navigation.NavigateTo("/staff");
                }
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error creating staff: {ex.Message}", Severity.Error);
        }
        finally
        {
            isLoading = false;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await form.Reset();
    }
}