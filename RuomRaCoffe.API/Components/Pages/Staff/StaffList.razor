@page "/staff"
@using RuomRaCoffe.API.Services
@using RuomRaCoffe.API.Data.Entities
@using RuomRaCoffe.Shared.Dtos
@inject StaffService StaffService
@inject NavigationManager Navigation
@inject ISnackbar Snackbar
@inject IDialogService DialogService

<PageTitle>Staff Management - Admin</PageTitle>

<MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="pa-4">
    <!-- Header -->
    <MudPaper Class="pa-4 mb-4" Elevation="1">
        <MudStack Row="true" Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center">
            <MudStack>
                <MudText Typo="Typo.h4" Class="d-flex align-center">
                    <MudIcon Icon="@Icons.Material.Filled.People" Class="mr-3" />
                    Staff Management
                </MudText>
                <MudText Typo="Typo.body2" Color="Color.Secondary">
                    Manage your staff members and their information
                </MudText>
            </MudStack>
            <MudButton Variant="Variant.Filled"
                       Color="Color.Primary"
                       StartIcon="@Icons.Material.Filled.Add"
                       OnClick="@(() => Navigation.NavigateTo("/staff/create"))">
                Add New Staff
            </MudButton>
        </MudStack>
    </MudPaper>

    <!-- Statistics Cards -->
    @if (statistics != null)
    {
        <MudGrid Class="mb-4">
            <MudItem xs="12" sm="6" md="3">
                <MudPaper Class="pa-4" Elevation="1">
                    <MudStack AlignItems="AlignItems.Center">
                        <MudIcon Icon="@Icons.Material.Filled.People" Color="Color.Primary" Size="Size.Large" />
                        <MudText Typo="Typo.h4">@statistics.TotalStaff</MudText>
                        <MudText Typo="Typo.body2" Color="Color.Secondary">Total Staff</MudText>
                    </MudStack>
                </MudPaper>
            </MudItem>
            <MudItem xs="12" sm="6" md="3">
                <MudPaper Class="pa-4" Elevation="1">
                    <MudStack AlignItems="AlignItems.Center">
                        <MudIcon Icon="@Icons.Material.Filled.Work" Color="Color.Success" Size="Size.Large" />
                        <MudText Typo="Typo.h4">@statistics.CurrentlyWorking</MudText>
                        <MudText Typo="Typo.body2" Color="Color.Secondary">Currently Working</MudText>
                    </MudStack>
                </MudPaper>
            </MudItem>
            <MudItem xs="12" sm="6" md="3">
                <MudPaper Class="pa-4" Elevation="1">
                    <MudStack AlignItems="AlignItems.Center">
                        <MudIcon Icon="@Icons.Material.Filled.BeachAccess" Color="Color.Warning" Size="Size.Large" />
                        <MudText Typo="Typo.h4">@statistics.OnLeave</MudText>
                        <MudText Typo="Typo.body2" Color="Color.Secondary">On Leave</MudText>
                    </MudStack>
                </MudPaper>
            </MudItem>
            <MudItem xs="12" sm="6" md="3">
                <MudPaper Class="pa-4" Elevation="1">
                    <MudStack AlignItems="AlignItems.Center">
                        <MudIcon Icon="@Icons.Material.Filled.Schedule" Color="Color.Info" Size="Size.Large" />
                        <MudText Typo="Typo.h4">@statistics.AverageWorkHoursToday</MudText>
                        <MudText Typo="Typo.body2" Color="Color.Secondary">Avg Hours Today</MudText>
                    </MudStack>
                </MudPaper>
            </MudItem>
        </MudGrid>
    }

    <!-- Staff Table -->
    <MudPaper Class="pa-4" Elevation="1">
        <MudStack Row="true" Justify="Justify.SpaceBetween" AlignItems="AlignItems.Center" Class="mb-4">
            <MudText Typo="Typo.h6">Staff Members</MudText>
            <MudTextField @bind-Value="searchString"
                          Placeholder="Search staff..."
                          Adornment="Adornment.Start"
                          AdornmentIcon="@Icons.Material.Filled.Search"
                          Variant="Variant.Outlined"
                          Size="Size.Small" />
        </MudStack>

        @if (isLoading)
        {
            <MudStack AlignItems="AlignItems.Center" Class="pa-8">
                <MudProgressCircular Indeterminate="true" />
                <MudText Typo="Typo.body2" Class="mt-2">Loading staff data...</MudText>
            </MudStack>
        }
        else
        {
            <MudTable Items="@filteredStaff"
                      Hover="true"
                      Striped="true"
                      Loading="@isLoading"
                      Filter="new Func<User,bool>(FilterFunc)">
                <HeaderContent>
                    <MudTh>Name</MudTh>
                    <MudTh>Email</MudTh>
                    <MudTh>Phone</MudTh>
                    <MudTh>Role</MudTh>
                    <MudTh>Status</MudTh>
                    <MudTh>Created</MudTh>
                    <MudTh>Actions</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd DataLabel="Name">
                        <MudStack Row="true" AlignItems="AlignItems.Center">
                            <MudAvatar Color="Color.Primary" Size="Size.Small">
                                <MudText Typo="Typo.body2">@context.Name?.Substring(0, 1).ToUpper()</MudText>
                            </MudAvatar>
                            <MudText>@context.Name</MudText>
                        </MudStack>
                    </MudTd>
                    <MudTd DataLabel="Email">@context.Email</MudTd>
                    <MudTd DataLabel="Phone">@context.Phone</MudTd>
                    <MudTd DataLabel="Role">
                        <MudChip Color="@GetRoleColor(context.Role)" Size="Size.Small">
                            @context.Role
                        </MudChip>
                    </MudTd>
                    <MudTd DataLabel="Status">
                        <MudChip Color="Color.Success" Size="Size.Small">
                            Active
                        </MudChip>
                    </MudTd>
                    <MudTd DataLabel="Created">@context.CreatedAt.ToString("MMM dd, yyyy")</MudTd>
                    <MudTd DataLabel="Actions">
                        <MudStack Row="true" Spacing="2">
                            <MudIconButton Icon="@Icons.Material.Filled.Edit"
                                           Color="Color.Primary"
                                           Size="Size.Small"
                                           OnClick="@(() => EditStaff(context.Id))" />
                            <MudIconButton Icon="@Icons.Material.Filled.Delete"
                                           Color="Color.Error"
                                           Size="Size.Small"
                                           OnClick="@(() => DeleteStaff(context.Id, context.Name))" />
                        </MudStack>
                    </MudTd>
                </RowTemplate>
                <PagerContent>
                    <MudTablePager />
                </PagerContent>
            </MudTable>
        }
    </MudPaper>
</MudContainer>

@code {
    private List<User> staffList = new();
    private List<User> filteredStaff = new();
    private StaffStatisticsDto? statistics;
    private bool isLoading = true;
    private string searchString = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await LoadStaffData();
    }

    private async Task LoadStaffData()
    {
        try
        {
            isLoading = true;

            // Load staff list
            staffList = await StaffService.GetStaffAsync();
            filteredStaff = staffList;

            // Load statistics
            statistics = await StaffService.GetStaffStatisticsAsync();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error loading staff data: {ex.Message}", Severity.Error);
        }
        finally
        {
            isLoading = false;
        }
    }

    private bool FilterFunc(User staff)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;

        return staff.Name?.Contains(searchString, StringComparison.OrdinalIgnoreCase) == true ||
               staff.Email?.Contains(searchString, StringComparison.OrdinalIgnoreCase) == true ||
               staff.Phone?.Contains(searchString, StringComparison.OrdinalIgnoreCase) == true ||
               staff.Role?.Contains(searchString, StringComparison.OrdinalIgnoreCase) == true;
    }

    private Color GetRoleColor(string? role)
    {
        return role switch
        {
            "Admin" => Color.Error,
            "Manager" => Color.Warning,
            "Staff" => Color.Primary,
            _ => Color.Default
        };
    }

    private void EditStaff(Guid id)
    {
        Navigation.NavigateTo($"/staff/edit/{id}");
    }

    private async Task DeleteStaff(Guid id, string? name)
    {
        var dialog = await DialogService.ShowMessageBox(
            "Delete Staff",
            $"Are you sure you want to delete staff member '{name}'?",
            yesText: "Delete",
            noText: "Cancel"
        );

        if (dialog == true)
        {
            try
            {
                await StaffService.DeleteStaffAsync(id);
                Snackbar.Add($"Staff '{name}' deleted successfully", Severity.Success);
                await LoadStaffData(); // Reload data
            }
            catch (Exception ex)
            {
                Snackbar.Add($"Error deleting staff: {ex.Message}", Severity.Error);
            }
        }
    }
} 